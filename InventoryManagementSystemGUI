import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

public class InventoryManagementGUI extends JFrame {
    private InventoryManagementSystem ims;
    private JTable productTable;
    private DefaultTableModel productTableModel;
    private JLabel totalProductsLabel, lowStockLabel, totalValueLabel;

    public InventoryManagementGUI() {
        ims = new InventoryManagementSystem();
        preloadProducts();

        setTitle("INVENTORY HUB");
        setSize(900, 550);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout(10, 8));

        // Header
        JPanel topPanel = new JPanel(new BorderLayout());
        JLabel titleLabel = new JLabel("INVENTORY HUB", JLabel.LEFT);
        titleLabel.setFont(new Font("SansSerif", Font.BOLD, 22));
        titleLabel.setForeground(new Color(28, 98, 159));
        topPanel.add(titleLabel, BorderLayout.WEST);

        JPanel userPanel = new JPanel();
        userPanel.setBackground(Color.WHITE);
        JLabel userLabel = new JLabel("Admin");
        userLabel.setIcon(UIManager.getIcon("FileView.fileIcon"));
        userPanel.add(userLabel);
        topPanel.add(userPanel, BorderLayout.EAST);

        // Buttons Panel (smaller)
        JPanel buttonPanel = new JPanel(new GridLayout(1, 8, 7, 7));
        buttonPanel.setBackground(Color.WHITE);

        JButton addBtn = createSmallButton("Add Product", new Color(47, 179, 81));
        JButton removeBtn = createSmallButton("Remove Product", new Color(220, 66, 45));
        JButton updateBtn = createSmallButton("Update Stock", new Color(255, 173, 49));
        JButton viewBtn = createSmallButton("View All", new Color(41, 128, 185));
        JButton searchBtn = createSmallButton("Search Product", new Color(123, 104, 238));
        JButton lowStockBtn = createSmallButton("Low Stock", new Color(255, 211, 39));
        JButton summaryBtn = createSmallButton("Summary", new Color(66, 133, 244));
        JButton exitBtn = createSmallButton("Exit", Color.GRAY);

        buttonPanel.add(addBtn);
        buttonPanel.add(removeBtn);
        buttonPanel.add(updateBtn);
        buttonPanel.add(viewBtn);
        buttonPanel.add(searchBtn);
        buttonPanel.add(lowStockBtn);
        buttonPanel.add(summaryBtn);
        buttonPanel.add(exitBtn);

        // Table
        productTableModel = new DefaultTableModel(
                new Object[]{"Product ID", "Name", "Category", "Stock", "Price", "Supplier"}, 0);
        productTable = new JTable(productTableModel);
        productTable.setRowHeight(22);
        JScrollPane tableScroll = new JScrollPane(productTable);

        JPanel tablePanel = new JPanel(new BorderLayout());
        JLabel invLabel = new JLabel("Current Product Inventory");
        invLabel.setFont(new Font("SansSerif", Font.BOLD, 14));
        tablePanel.add(invLabel, BorderLayout.NORTH);
        tablePanel.add(tableScroll, BorderLayout.CENTER);

        // Insights Panel (small labels)
        JPanel insightsPanel = new JPanel(new GridLayout(3, 1, 8, 8));
        insightsPanel.setPreferredSize(new Dimension(220, 130));
        totalProductsLabel = createSmallStatsLabel("TOTAL PRODUCTS", "0", new Color(47, 179, 81));
        lowStockLabel = createSmallStatsLabel("LOW STOCK", "0", new Color(255, 211, 39));
        totalValueLabel = createSmallStatsLabel("TOTAL VALUE", "$0.00", new Color(41, 128, 185));
        insightsPanel.add(totalProductsLabel);
        insightsPanel.add(lowStockLabel);
        insightsPanel.add(totalValueLabel);

     // --- Main Content Layout ---
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.add(tablePanel, BorderLayout.CENTER);
        mainPanel.add(insightsPanel, BorderLayout.EAST);
        add(topPanel, BorderLayout.NORTH);
        add(buttonPanel, BorderLayout.NORTH);
        add(mainPanel, BorderLayout.CENTER);
     

        // Button actions
        addBtn.addActionListener(e -> addProductDialog());
        removeBtn.addActionListener(e -> removeProductDialog());
        updateBtn.addActionListener(e -> updateStockDialog());
        viewBtn.addActionListener(e -> refreshTable());
        searchBtn.addActionListener(e -> searchByNameDialog());
        lowStockBtn.addActionListener(e -> showLowStockDialog());
        summaryBtn.addActionListener(e -> showSummaryDialog());
        exitBtn.addActionListener(e -> System.exit(0));

        refreshTable();
        updateQuickInsights();
    }

    // ----- SMALL BUTTON -----
    private JButton createSmallButton(String text, Color color) {
        JButton btn = new JButton(text);
        btn.setBackground(color);
        btn.setForeground(Color.WHITE);
        btn.setFont(new Font("SansSerif", Font.PLAIN, 11));
        btn.setFocusPainted(false);
        btn.setPreferredSize(new Dimension(90, 26));
        return btn;
    }

    private JLabel createSmallStatsLabel(String title, String value, Color color) {
        JLabel label = new JLabel("<html><center>" + title + "<br><span style='font-size:13pt; color:#"
                + Integer.toHexString(color.getRGB()).substring(2)
                + ";'>" + value + "</span></center></html>");
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setBorder(BorderFactory.createLineBorder(color, 2, true));
        label.setFont(new Font("SansSerif", Font.PLAIN, 12));
        return label;
    }

    // ----- PRELOAD 100 PRODUCTS -----
    private void preloadProducts() {
        String[] names = {"Monitor", "Keyboard", "Chair", "Notebook", "Mug", "Mouse", "Lamp", "Backpack", "Pen", "Tablet"};
        String[] categories = {"Electronics", "Stationery", "Furniture", "Kitchenware", "Appliances"};
        String[] suppliers = {"Dell", "Logitech", "Ikea", "Classmate", "AmazonBasics", "Sony", "HP", "Samsung", "Parker"};
        java.util.Random rand = new java.util.Random();

        for (int i = 0; i < 100; i++) {
            String name = names[rand.nextInt(names.length)] + " " + (i + 1);
            String category = categories[rand.nextInt(categories.length)];
            double price = 5 + rand.nextInt(150);
            int quantity = 5 + rand.nextInt(200);
            String supplier = suppliers[rand.nextInt(suppliers.length)];
            ims.addProduct(new Product(ims.nextProductId++, name, category, price, quantity, supplier));
        }
    }

    // ----- ADD PRODUCT -----
    private void addProductDialog() {
        JTextField nameField = new JTextField();
        JTextField categoryField = new JTextField();
        JTextField priceField = new JTextField();
        JTextField qtyField = new JTextField();
        JTextField supplierField = new JTextField();

        Object[] fields = {
                "Name:", nameField,
                "Category:", categoryField,
                "Price:", priceField,
                "Quantity:", qtyField,
                "Supplier:", supplierField
        };

        int option = JOptionPane.showConfirmDialog(this, fields, "Add Product", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                Product p = new Product(
                        ims.nextProductId++, nameField.getText(), categoryField.getText(),
                        Double.parseDouble(priceField.getText()),
                        Integer.parseInt(qtyField.getText()), supplierField.getText()
                );
                ims.addProduct(p);
                refreshTable();
                updateQuickInsights();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input: " + ex.getMessage());
            }
        }
    }

    // ----- REMOVE PRODUCT -----
    private void removeProductDialog() {
        String input = JOptionPane.showInputDialog(this, "Enter Product ID to remove:");
        if (input != null) {
            try {
                int id = Integer.parseInt(input);
                if (ims.removeProduct(id))
                    JOptionPane.showMessageDialog(this, "Product removed.");
                else
                    JOptionPane.showMessageDialog(this, "Product not found!");
                refreshTable();
                updateQuickInsights();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        }
    }

    // ----- UPDATE STOCK -----
    private void updateStockDialog() {
        JTextField idField = new JTextField();
        JTextField qtyField = new JTextField();
        Object[] fields = {"Product ID:", idField, "New stock quantity:", qtyField};

        int option = JOptionPane.showConfirmDialog(this, fields, "Update Stock", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            try {
                int id = Integer.parseInt(idField.getText());
                int newQuantity = Integer.parseInt(qtyField.getText());
                Product product = ims.searchById(id);
                if (product != null) {
                    product.setQuantity(newQuantity);
                    JOptionPane.showMessageDialog(this, "Stock updated to " + newQuantity);
                    refreshTable();
                    updateQuickInsights();
                } else {
                    JOptionPane.showMessageDialog(this, "Product not found!");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Invalid input: " + ex.getMessage());
            }
        }
    }

    // ----- SEARCH BY PRODUCT NAME -----
    private void searchByNameDialog() {
        String name = JOptionPane.showInputDialog(this, "Enter product name to search:");
        if (name != null && !name.isEmpty()) {
            List<Product> results = ims.searchByName(name);
            if (results.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No products found with that name.");
            } else {
                StringBuilder sb = new StringBuilder("Search Results:\n\n");
                for (Product p : results)
                    sb.append(p.getDetailedInfo()).append("\n");
                JTextArea textArea = new JTextArea(sb.toString());
                textArea.setEditable(false);
                JScrollPane scrollPane = new JScrollPane(textArea);
                scrollPane.setPreferredSize(new Dimension(550, 300));
                JOptionPane.showMessageDialog(this, scrollPane, "Search Results", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    // ----- SUMMARY -----
    private void showSummaryDialog() {
        StringBuilder sb = new StringBuilder();
        sb.append("SYSTEM SUMMARY\n-------------------\n");
        sb.append("Total Products: ").append(ims.getTotalProducts()).append("\n");
        sb.append("Total Categories: ").append(ims.getTotalCategories()).append("\n");
        sb.append("Total Inventory Value: $").append(String.format("%.2f", ims.calculateTotalValue())).append("\n\n");

        HashMap<String, List<Product>> categoryMap = ims.getProductsByCategory();
        sb.append("Category Breakdown:\n");
        for (Map.Entry<String, List<Product>> entry : categoryMap.entrySet()) {
            double value = 0;
            for (Product p : entry.getValue())
                value += p.getTotalValue();
            sb.append("  ").append(entry.getKey()).append(": ").append(entry.getValue().size())
                    .append(" products, $").append(String.format("%.2f", value)).append("\n");
        }
        JOptionPane.showMessageDialog(this, sb.toString());
    }

    // ----- LOW STOCK -----
    private void showLowStockDialog() {
        int threshold = 10;
        List<Product> lowStock = ims.getLowStockProducts(threshold);
        if (lowStock.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No low stock items (<= " + threshold + ").");
        } else {
            StringBuilder sb = new StringBuilder("Low Stock Products (<= " + threshold + "):\n\n");
            for (Product p : lowStock)
                sb.append(p.toString()).append("\n");
            JTextArea textArea = new JTextArea(sb.toString());
            textArea.setEditable(false);
            JOptionPane.showMessageDialog(this, new JScrollPane(textArea), "Low Stock", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void refreshTable() {
        productTableModel.setRowCount(0);
        for (Product p : ims.inventory.values()) {
            productTableModel.addRow(new Object[]{
                p.getProductId(), p.getName(), p.getCategory(),
                p.getQuantity(), String.format("$%.2f", p.getPrice()), p.getSupplier()
            });
        }
    }

    private void updateQuickInsights() {
        totalProductsLabel.setText("<html><center>TOTAL PRODUCTS<br><span style='font-size:13pt; color:#2fb351;'>"
                + ims.getTotalProducts() + "</span></center></html>");
        int lowStockNum = ims.getLowStockProducts(10).size();
        lowStockLabel.setText("<html><center>LOW STOCK<br><span style='font-size:13pt; color:#ffd327;'>"
                + lowStockNum + "</span></center></html>");
        totalValueLabel.setText("<html><center>TOTAL VALUE<br><span style='font-size:13pt; color:#2980b9;'>$"
                + String.format("%.2f", ims.calculateTotalValue()) + "</span></center></html>");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new InventoryManagementGUI().setVisible(true));
    }
}
